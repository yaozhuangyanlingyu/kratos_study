// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.5
// source: student/v1/student.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStudentServiceCreateStudent = "/api.student.v1.StudentService/CreateStudent"
const OperationStudentServiceListStudent = "/api.student.v1.StudentService/ListStudent"

type StudentServiceHTTPServer interface {
	CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentReply, error)
	ListStudent(context.Context, *ListStudentRequest) (*ListStudentReply, error)
}

func RegisterStudentServiceHTTPServer(s *http.Server, srv StudentServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/student/create", _StudentService_CreateStudent0_HTTP_Handler(srv))
	r.GET("/api/v1/student/list", _StudentService_ListStudent0_HTTP_Handler(srv))
}

func _StudentService_CreateStudent0_HTTP_Handler(srv StudentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStudentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentServiceCreateStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStudent(ctx, req.(*CreateStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStudentReply)
		return ctx.Result(200, reply)
	}
}

func _StudentService_ListStudent0_HTTP_Handler(srv StudentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStudentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStudentServiceListStudent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStudent(ctx, req.(*ListStudentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStudentReply)
		return ctx.Result(200, reply)
	}
}

type StudentServiceHTTPClient interface {
	CreateStudent(ctx context.Context, req *CreateStudentRequest, opts ...http.CallOption) (rsp *CreateStudentReply, err error)
	ListStudent(ctx context.Context, req *ListStudentRequest, opts ...http.CallOption) (rsp *ListStudentReply, err error)
}

type StudentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewStudentServiceHTTPClient(client *http.Client) StudentServiceHTTPClient {
	return &StudentServiceHTTPClientImpl{client}
}

func (c *StudentServiceHTTPClientImpl) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...http.CallOption) (*CreateStudentReply, error) {
	var out CreateStudentReply
	pattern := "/api/v1/student/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStudentServiceCreateStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StudentServiceHTTPClientImpl) ListStudent(ctx context.Context, in *ListStudentRequest, opts ...http.CallOption) (*ListStudentReply, error) {
	var out ListStudentReply
	pattern := "/api/v1/student/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStudentServiceListStudent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
